<template>
	<view class="main-wrap">
		<!-- 步骤模块 -->
		<!-- <step-block :step="step" /> -->
		<!-- 表单模块 -->
		<view class="form-wrap">
				<view class="form-item">
					<input v-model="phone" class="form-input" placeholder-class="form-input-placeholder" type="number"
						placeholder="请输入注册手机号" maxlength="11">
				</view>
				<view class="form-item">
					<input class="form-input" v-model="msg" type="number" placeholder-class="form-input-placeholder"
						placeholder="请输入手机验证码" maxlength="6">
					<view class="verify-code-block" @touchend="getVerifyCode">
						<text class="verify-code-text">{{codeText}}</text>
					</view>
				</view>
				<view class="form-item">
					<input v-model="password" class="form-input" placeholder-class="form-input-placeholder"
						type="password" placeholder="请输入新密码" maxlength="16">
				</view>
				<view class="form-item">
					<input v-model="repeatPassword" class="form-input" placeholder-class="form-input-placeholder"
						type="password" placeholder="请重复您的新密码" maxlength="16">
				</view>
		</view>
		<u-code ref="uCode" change-text="Xs" @change="verifyCodeChange" />
		<!-- 按钮模块 -->
		<u-button :disabled="loading" :loading="loading" loading-text="重置中" size="large" @click="handleStep"
			text="确定" />
	</view>
</template>

<script>
	// 验证验证码是否合法的正则表达式
	let yzmReg = /^[0-9]+$/;
	// 密码的正则验证
	let passwordReg = /^.{6,18}$/;
	export default {
		data() {
			return {
				codeText: '',
				loading: false,
				canBack: true,
				phone: '', //手机号码
				msg: '', //短信
				password: '', //密码
				repeatPassword: '', //重复密码
			};
		},
		onBackPress(options) {
			// 这里可以自定义返回逻辑，比如下面跳转其他页面
			if (!this.canBack) {
				if (this.step > 0 && !this.loading) {
					this.step -= 1
				}
				if (this.step === 0) {
					this.canBack = true
				}
				return true;
			}
		},
		methods: {
			/**
			 * 验证码更改
			 * @param {Object} text
			 */
			verifyCodeChange(text) {
				this.codeText = text;
			},
			/**
			 * 获取验证码
			 */
			getVerifyCode() {
				console.log(111)
				if (!uni.$u.test.mobile(this.phone)) {
					uni.$u.toast('请输入正确的手机号码');
					return
				}
				if (this.$refs.uCode.canGetCode) {
					// 模拟向后端请求验证码
					uni.showLoading({
						title: '正在获取验证码'
					})
					uni.$u.api.user.loginSendMsg({
						phone: this.phone,
					}).then(res => {
						uni.hideLoading();
						// 这里此提示会被this.start()方法中的提示覆盖
						uni.$u.toast('验证码已发送');
						// 通知验证码组件内部开始倒计时
						this.$refs.uCode.start();
					})
				} else {
					uni.$u.toast('倒计时结束后再发送');
				}
			},
			/**
			 * 处理下一步
			 */
			handleStep() {
				if (!uni.$u.test.mobile(this.phone)) {
					uni.$u.toast('请输入正确的手机号码');
					return
				}
				if (uni.$u.trim(this.msg) == '') {
					uni.$u.toast('手机验证码不能为空');
					return
				}
				// 校验验证码是否为空
				if (!uni.$u.test.code(this.msg)) {
					uni.$u.toast('请输入正确的验证码');
					return;
				}
				// 对于密码的公共判断方法
				if (!passwordReg.test(this.password) || !passwordReg.test(this.repeatPassword)) {
					uni.$u.toast('请输入6-18位的密码');
					return;
				}
				if (this.password != this.repeatPassword) {
					uni.$u.toast('两次输入的密码不一致');
					return
				}
				this.resetPwd()
			},
			/**
			 * 重置密码
			 */
			resetPwd() {
				this.loading = true
				uni.$u.api.user.loginUpdatePassword({
					phone: this.phone,
					msg: this.msg,
					password: uni.$u.md5.md5(this.password)
				}).then(res => {
					uni.$u.toast('重置密码成功');
					setTimeout(() => {
						uni.reLaunch({
							url: '/pages/login/login'
						})
					}, 2000)
				}).catch(err=>{
					this.loading = false
				})
			}
		}
	}
</script>

<style scoped lang="scss">
	.main-wrap {
		padding: 0 70rpx;
	}

	.form-wrap {
		padding-top: 100rpx;
		margin-bottom: 80rpx;
	}

	.form-item {
		height: 120rpx;
		border-bottom: 1px solid #e6e6e6;
		display: flex;
		flex-direction: row;
		align-items: center;
	}

	.form-input {
		font-size: 40rpx;
		color: #222222;
		flex: 1;
	}

	.form-input-placeholder {
		color: #bbbbbb;
	}

	.verify-code-block {
		width: 200rpx;
		height: 120rpx;
		display: flex;
		flex-direction: row;
		align-items: center;
		justify-content: center;
	}

	.verify-code-text {
		font-size: 32rpx;
		font-weight: 500;
		color: #222222;
	}

	.verify-code-text:active {
		opacity: 0.7;
	}
</style>
